{"version":3,"sources":["components/Nav/Nav.jsx","components/TasksDisplay/TasksDisplay.jsx","components/Task/Task.jsx","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","TasksDispaly","state","Tasks","title","date","complete","this","props","Component","Task","info","isChecked","isCompliate","handleChange","e","key","target","name","value","setState","copyState","handleSubmit","event","console","log","preventDefault","formData","isoChecked","onSubmit","type","id","onChange","required","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAaiBA,MAVjB,WACI,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAMC,GAAG,KAAT,QACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,QAAT,S,8CCgEKC,E,2MApEXC,MAAQ,CACJC,MAAQ,CACP,CACOC,MAAM,GACNC,KAAK,GACLC,UAAS,K,wEA2CjB,OACI,yBAAKP,UAAU,eACf,sCAKQ,6BACAQ,KAAKC,MAAMJ,Y,GA1DJK,a,OCyFZC,E,2MAvFXR,MAAQ,CACJS,KAAM,CACFP,MAAO,GACPC,KAAM,GACNO,WAAW,EACXC,aAAa,I,EAMrBC,aAAe,SAAAC,GACX,IAAMC,EAAMD,EAAEE,OAAOC,KACfC,EAAQJ,EAAEE,OAAOE,MACvB,EAAKC,UAAS,YAAuB,IAAjBC,EAAgB,kBAOhC,MANY,cAARL,EACAK,EAAUV,KAAKC,WAAaS,EAAUV,KAAKC,UAG3CS,EAAUV,KAAKK,GAAOG,EAEnBE,M,EAKfC,aAAe,SAACC,GACZC,QAAQC,IAAI,gBACZF,EAAMG,iBACS,EAAKxB,MAAMU,UAA1B,IACMe,EAAW,EAAKzB,MAAMS,KAC5BgB,EAASd,aAAc,EACvB,EAAKO,SAAS,CACVT,KAAMgB,IAEVH,QAAQC,IAAI,EAAKvB,MAAMS,MAEvB,EAAKS,SAAS,CACVT,KAAM,CACFP,MAAO,GACPC,KAAM,GACNuB,YAAY,M,wEAUpB,OADAJ,QAAQC,IAAIlB,KAAKL,MAAMS,KAAKC,WAExB,yBAAKb,UAAU,QAIX,6BAEI,0BAAM8B,SAAUtB,KAAKe,cACjB,yBAAKvB,UAAU,gBACX,2BAAO+B,KAAK,WACRC,GAAG,YACHb,KAAK,YACLC,MAAOZ,KAAKL,MAAMS,KAAKC,UACvBoB,SAAUzB,KAAKO,eAGnB,2BAAOgB,KAAK,OAAOZ,KAAK,QACpBa,GAAG,QAAQE,UAAQ,EACnBd,MAAOZ,KAAKL,MAAMS,KAAKP,MACvB4B,SAAUzB,KAAKO,eAEnB,2BAAOgB,KAAK,OAAOZ,KAAK,OACpBC,MAAOZ,KAAKL,MAAMS,KAAKN,KACvB0B,GAAG,OAAOE,UAAQ,EAClBD,SAAUzB,KAAKO,uB,GA5E5BL,aCcJyB,MAVf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,IAAD,CAAOoC,KAAK,IAAIC,UAAWtC,IAC3B,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAyBC,SAASC,eAAe,SD4H1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cb16ab3d.chunk.js","sourcesContent":["import React from 'react';\nimport {Link} from 'react-router-dom'\n\nfunction Nav() {\n    return (\n      <div className=\"App\">\n        <Link to=\"/\">Home</Link>\n          <Link to=\"/about\">About</Link>\n          <Link to=\"/api\">api</Link>\n      </div>\n    );\n  }\n  \n  export default Nav;","import React, { Component } from 'react';\n\nclass TasksDispaly extends Component {\n\n    state = { \n        Tasks : [\n         {\n                title:\"\",\n                date:\"\",\n                complete:false,\n              \n                // category:\"\"\n            }\n        ]\n     }\n    //  TasksDispaly = (info) => {\n    //     // let title = this.state.title\n    //     // console.log(title)\n    //     // let date = this.state.date\n    //     // console.log(date)\n    //     // let complete = this.state.complete\n    //     // console.log(complete)\n    //     // let TasksCopy = [...this.state.Tasks]\n    //     // TasksCopy.map((tc) => {\n    //     //     tc.title=info.title,\n    //     //     tc.date=info.title,\n    //     //     tc.complete=info.complete }\n    //     // )\n    //     // //TasksCopy.push(Task)\n    //     // //TasksCopy.map((tc) => console.log(tc.title))\n    //     // console.log(TasksCopy)\n    //     //  this.setState({\n    //     //      Tasks:Task\n    //     //  })\n    //  }\n\n    \n    //  TasksDisplay = (info) => {\n    //    const TaskCopy =  this.state.Tasks.map((task) => {\n    //          return (task.title= info.title, \n    //             task.date=info.date ,\n    //             task.complete=info.complete) })\n    //     this.setState({\n    //         Tasks:TaskCopy\n    //         })\n         \n    \n    //  }\n \n\n    render() { \n        \n        return ( \n            <div className=\"TaskDispaly\">\n            <h3>Tasks:</h3>\n           \n           {/* {this.state.Tasks.map((task,index) => \n            { */}\n               {/* //return ( */}\n                    <div>\n                   {this.props.title}\n                {/* <h1 key={index}>{task.title}</h1>\n                <h1>{task.date}</h1>\n                <h1>{task.complete}</h1> */}\n                </div>\n                {/* ) */}\n           {/* })} */}\n            </div>\n         );\n    }\n}\n \nexport default TasksDispaly;","import React, { Component } from 'react'\n// import Card from 'react-bootstrap/card'\n// import taskDisplay from '../TasksDisplay/TasksDisplay'\nclass Task extends Component {\n    state = {\n        info: {\n            title: \"\",\n            date: '',\n            isChecked: false,\n            isCompliate: false\n        }\n    }\n\n\n\n    handleChange = e => {\n        const key = e.target.name\n        const value = e.target.value\n        this.setState(({ ...copyState }) => {\n            if (key === \"isChecked\") {\n                copyState.info.isChecked = !copyState.info.isChecked\n            }\n            else {\n                copyState.info[key] = value\n            }\n            return copyState\n        })\n    }\n\n\n    handleSubmit = (event) => {\n        console.log(\"handleSubmit\")\n        event.preventDefault()\n        const check = !this.state.isChecked\n        const formData = this.state.info\n        formData.isCompliate = true\n        this.setState({\n            info: formData\n        })\n        console.log(this.state.info)\n\n        this.setState({\n            info: {\n                title: \"\",\n                date: '',\n                isoChecked: false\n            }\n        })\n    }\n\n\n    render() {\n        // const taskDisplay = this.state.info.isCompliate ? <TasksDisplay  info={this.state.info}/> : null\n\n        console.log(this.state.info.isChecked)\n        return (\n            <div className=\"Task\">\n                {/* <Card>\n  <Card.Body>This is some text within a card body.</Card.Body>\n</Card> */}\n                <div>\n\n                    <form onSubmit={this.handleSubmit}>\n                        <div className=\"form-example\">\n                            <input type=\"checkbox\"\n                                id=\"isChecked\"\n                                name=\"isChecked\"\n                                value={this.state.info.isChecked}\n                                onChange={this.handleChange}\n                            />\n\n                            <input type=\"text\" name=\"title\"\n                                id=\"title\" required\n                                value={this.state.info.title}\n                                onChange={this.handleChange} />\n\n                            <input type=\"date\" name=\"date\"\n                                value={this.state.info.date}\n                                id=\"date\" required\n                                onChange={this.handleChange} />\n                        </div>\n\n                    </form>\n                </div>\n\n\n            </div>\n        );\n    }\n}\n\nexport default Task;","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav/Nav'\nimport {Route} from 'react-router-dom'\nimport TasksDispaly from './components/TasksDisplay/TasksDisplay';\nimport Task from './components/Task/Task'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Route path=\"/\" component={Nav}/>\n      <TasksDispaly></TasksDispaly>\n      <Task/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}